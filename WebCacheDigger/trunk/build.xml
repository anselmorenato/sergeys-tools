<?xml version="1.0" encoding="UTF-8"?>
<project default="all">

	<property name="properties.file" value="build.properties" />
	
	<!--
	<property name="revision" value="2011-10-11-3" />
	<property name="webstart.url" value="http://192.168.56.1:8080/localweb" />
	<property name="deploy.dir" value="d:\\tomcat\\webapps\\localweb" />
	-->

	<property name="dist.dir" value="jar/dist" />
	<property name="work.dir" value="jar/tmp" />

	<property name="main-class" value="org.sergeys.webcachedigger.ui.WebCacheDigger" />

	<property name="keystore.file" value="${work.dir}/.keystore" />
	<property name="keystore.alias" value="sergey.selivanov" />
	<property name="keystore.password" value="password" />
	
	<property name="lib.mimeutil" value="mime-util-2.1.3.jar" />
	<property name="lib.slf4j-api" value="slf4j-api-1.6.2.jar" />
	<property name="lib.slf4j-impl" value="slf4j-simple-1.6.2.jar" />
	<property name="lib.mp3agic" value="mp3agic-0.6.9.jar" />
	<property name="lib.h2" value="h2-1.3.160.jar" />

	<macrodef name="unsignjar">
		<!-- http://frank.zinepal.com/unsign-a-jar-with-ant -->

		<attribute name="jar" />

		<sequential>
			<!-- Remove any existing signatures from a JAR file. -->
			<tempfile prefix="usignjar-" destdir="${java.io.tmpdir}" property="temp.file" />
			<echo message="Removing signatures from JAR: @{jar}" />
			<mkdir dir="${temp.file}" />

			<unjar src="@{jar}" dest="${temp.file}">
				<patternset>
					<include name="**" />
					<exclude name="META-INF/*.SF" />
					<exclude name="META-INF/*.DSA" />
					<exclude name="META-INF/*.RSA" />
				</patternset>
			</unjar>

			<delete file="@{jar}" failonerror="true" />

			<!-- Touch it in case the file didn't have a manifest.
	             Otherwise the JAR task below will fail if the manifest 
	             file doesn't exist. -->
			<mkdir dir="${temp.file}/META-INF" />
			<touch file="${temp.file}/META-INF/MANIFEST.MF" />

			<jar destfile="@{jar}" basedir="${temp.file}" includes="**" manifest="${temp.file}/META-INF/MANIFEST.MF" />

			<delete dir="${temp.file}" failonerror="true" />
		</sequential>
	</macrodef>

	<target name="all" depends="init, logic, ui, libs, resources, images, jnlp, deploy-local">
	</target>

	<target name="init">
		<property file="${properties.file}">
		</property>
	</target>

	<target name="logic" depends="logic-changed, logic-jar">
	</target>

	<target name="ui" depends="ui-jar">
	</target>

	<target name="libs" depends="library, copy-libs">
	</target>

	<target name="logic-changed">		
		<uptodate property="logic.unchanged" targetfile="${dist.dir}/logic.${revision}.jar">			
			<srcfiles dir="bin" includes="org/sergeys/webcachedigger/logic/**/*.class, META-INF/services/*"></srcfiles>			
		</uptodate>
	</target>
	
	<target name="logic-jar" unless="logic.unchanged" depends="logic-changed, create-key">
		
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/logic.${revision}.jar" 
			basedir="bin" includes="org/sergeys/webcachedigger/logic/**/*.class,META-INF/**" index="true">
		</jar>

		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/logic.${revision}.jar" verbose="true">
		</signjar>
	</target>

	<target name="ui-changed">		
		<uptodate property="ui.unchanged" targetfile="${dist.dir}/ui.${revision}.jar">			
			<srcfiles dir="bin" includes="org/sergeys/webcachedigger/ui/**/*.class, META-INF/services/*"></srcfiles>			
		</uptodate>
	</target>
	
	<target name="ui-jar" unless="ui.unchanged" depends="ui-changed, create-key">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/ui.${revision}.jar" 
			basedir="bin" includes="org/sergeys/webcachedigger/ui/**/*.class,META-INF/**" index="true">
		</jar>

		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/ui.${revision}.jar" verbose="true">
		</signjar>
	</target>

	<target name="res-changed">		
		<uptodate property="res.unchanged" targetfile="${dist.dir}/resources.${revision}.jar">			
			<srcfiles dir="bin" includes="magic.mime, resources/**"></srcfiles>						
		</uptodate>
	</target>		
	
	<target name="resources" unless="res.unchanged" depends="res-changed, create-key">
		<mkdir dir="${dist.dir}" />
						
		<jar destfile="${dist.dir}/resources.${revision}.jar" 
			basedir="bin" includes="magic.mime, resources/**" index="true">
		</jar>

		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/resources.${revision}.jar" verbose="true">
		</signjar>
	</target>

	<target name="images-changed">		
		<uptodate property="images.unchanged" targetfile="${dist.dir}/images.${revision}.jar">			
			<srcfiles dir="bin" includes="images/**"></srcfiles>			
		</uptodate>
	</target>
	
	<target name="images" unless="images.unchanged" depends="images-changed, create-key">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/images.${revision}.jar" 
			basedir="bin" includes="images/**" index="true">
		</jar>

		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/images.${revision}.jar" verbose="true">
		</signjar>
	</target>

	<target name="jnlp">
		<mkdir dir="${dist.dir}" />
		<copy file="jar/webcachedigger.jnlp" tofile="${dist.dir}/wcd.jnlp" overwrite="true">
		</copy>
		
		<copy file="jar/largeicon.png" tofile="${dist.dir}/largeicon.png" overwrite="true">
		</copy>

		<replace file="${dist.dir}/wcd.jnlp">
			<replacefilter token="%REVISION%" value="${revision}"/>
			<replacefilter token="%URL%" value="${webstart.url}"/>
		</replace>
	</target>

	<target name="check-logic-jar-changed1">
		<echo>compare ${dist.dir}/logic.${logic.revision}.jar</echo>
		<condition property="logic.jar.changed">
			<not>
				<filesmatch file1="${work.dir}/logic.jar" file2="${dist.dir}/logic.${logic.revision}.jar" />
			</not>
		</condition>
	</target>

	<target name="copy-logic-jar1" if="logic.jar.changed" depends="check-logic-jar-changed1">
		<echo>logic.jar.changed: ${logic.jar.changed}</echo>
		<!--				
		<delete file="${dist.dir}/logic.${logic.revision}.jar"></delete>
		-->
		<copy file="${work.dir}/logic.jar" tofile="${dist.dir}/logic.${logic.revision.next}.jar" overwrite="true" />
		<echo>updated ${dist.dir}/logic.${logic.revision.next}.jar</echo>
		<propertyfile file="${properties.file}">
			<entry key="logic.revision" type="int" default="0" operation="+" />
			<entry key="logic.revision.next" type="int" default="1" operation="+" />
		</propertyfile>

	</target>

	<target name="logic-jar1" depends="create-key">
		<mkdir dir="${work.dir}" />
		<jar destfile="${work.dir}/logic.unsigned.jar" basedir="bin" includes="org/sergeys/webcachedigger/logic/**/*.class,META-INF/**" index="true">
		</jar>
		<echo>${work.dir}/logic.jar packed</echo>

		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" jar="${work.dir}/logic.unsigned.jar" signedjar="${work.dir}/logic.jar" verbose="true">
		</signjar>
		<echo>${work.dir}/logic.jar signed</echo>

	</target>

	<target name="ui-jar1">
		<mkdir dir="${work.dir}" />
		<jar destfile="${work.dir}/ui.jar" basedir="bin" includes="org/sergeys/webcachedigger/ui/**/*.class" index="true">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
		</jar>
	</target>

	<target name="check-key">
		<available file="${keystore.file}" property="keystore.file.exists">
		</available>
	</target>

	<target name="create-key" depends="check-key" unless="keystore.file.exists">
		<echo>Create key</echo>
		<mkdir dir="${work.dir}" />
		<genkey keystore="${keystore.file}" alias="${keystore.alias}" validity="365" storepass="${keystore.password}">
			<dname>
				<param name="CN" value="Sergey Selivanov" />
				<param name="OU" value="Home" />
				<param name="O" value="Sergey Selivanov" />
				<param name="C" value="UA" />
				<param name="L" value="Kharkov" />
				<!--
				<param name="EmailAddress" value="sergey.selivanov@gmail.com" />
				-->
			</dname>
		</genkey>
	</target>

	<target name="clean">
	</target>

	<target name="check-libs-changed">

		<condition property="libs.changed">
			<or>
				<not>
					<uptodate targetfile="${dist.dir}/${lib.h2}" srcfile="lib/${lib.h2}">
					</uptodate>
				</not>

				<not>
					<uptodate targetfile="${dist.dir}/${lib.mimeutil}" srcfile="lib/${lib.mimeutil}">
					</uptodate>
				</not>

				<not>
					<uptodate targetfile="${dist.dir}/${lib.slf4j-api}" srcfile="lib/${lib.slf4j-api}">
					</uptodate>
				</not>

				<not>
					<uptodate targetfile="${dist.dir}/${lib.slf4j-impl}" srcfile="lib/${lib.slf4j-impl}">
					</uptodate>
				</not>

				<not>
					<uptodate targetfile="${dist.dir}/${lib.mp3agic}" srcfile="lib/${lib.mp3agic}">
					</uptodate>
				</not>

			</or>
		</condition>
	</target>

	<target name="copy-libs" if="libs.changed" depends="create-key, check-libs-changed">
		<mkdir dir="${dist.dir}" />
				
		<copy file="lib/${lib.mimeutil}" todir="${dist.dir}" overwrite="true">
		</copy>
		<unsignjar jar="${dist.dir}/${lib.mimeutil}" />
		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/${lib.mimeutil}" signedjar="${dist.dir}/${lib.mimeutil}" verbose="true">
		</signjar>

		<copy file="lib/${lib.slf4j-api}" todir="${dist.dir}" overwrite="true">
		</copy>
		<unsignjar jar="${dist.dir}/${lib.slf4j-api}" />
		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/${lib.slf4j-api}" signedjar="${dist.dir}/${lib.slf4j-api}" verbose="true">
		</signjar>

		<copy file="lib/${lib.slf4j-impl}" todir="${dist.dir}" overwrite="true">
		</copy>
		<unsignjar jar="${dist.dir}/${lib.slf4j-impl}" />
		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/${lib.slf4j-impl}" signedjar="${dist.dir}/${lib.slf4j-impl}" verbose="true">
		</signjar>

		<copy file="lib/${lib.mp3agic}" todir="${dist.dir}" overwrite="true">
		</copy>
		<unsignjar jar="${dist.dir}/${lib.mp3agic}" />
		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/${lib.mp3agic}" signedjar="${dist.dir}/${lib.mp3agic}" verbose="true">
		</signjar>

		<copy file="lib/${lib.h2}" todir="${dist.dir}" overwrite="true">
		</copy>
		<unsignjar jar="${dist.dir}/${lib.h2}" />
		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/${lib.h2}" signedjar="${dist.dir}/${lib.h2}" verbose="true">
		</signjar>

	</target>

	<target name="library-changed">
		<uptodate property="library.unchanged" targetfile="${dist.dir}/library.${revision}.jar">			
			<srcfiles dir="${library.dir}" includes="bin/**"></srcfiles>			
		</uptodate>
	</target>
	
	<target name="library" unless="library.unchanged" depends="library-changed, create-key">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/library.${revision}.jar" 
			basedir="${library.dir}/bin" includes="**" index="true">
		</jar>
		<signjar keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" 
			jar="${dist.dir}/library.${revision}.jar" verbose="true">
		</signjar>
	</target>
	
	
	<target name="deploy-local">
		<delete>
			<fileset dir="${deploy.dir}" includes="*.jar, *.jnlp, *.png">
			</fileset>
		</delete>
		<copy todir="${deploy.dir}">
			<fileset dir="${dist.dir}">
			</fileset>
		</copy>
	</target>
	
	
</project>

