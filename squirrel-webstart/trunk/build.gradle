apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

version = '441'
sourceCompatibility = 1.6
targetCompatibility = 1.6
mainClassName = 'org.sergeys.sqws.SquirrelWebstart'

ext.originalDir = 'f:/bin/squirrelsql-3.6-optional'
ext.buildWebstartDir = 'build/webstart'
ext.webstartBaseUrl = 'http://svs.bugz.org.ua/squirrel'


repositories {
    mavenCentral()
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.0.2'
    compile 'org.apache.logging.log4j:log4j-core:2.0.2'

    compile files("${originalDir}/squirrel-sql.jar")
}


task packOriginalHome(type: Jar){

    inputs.dir "$originalDir"
    outputs.file 'build/tmp/squirrel-home.jar'


    archiveName 'squirrel-home.jar'
    destinationDir file('build/tmp')
    from("$originalDir")
    exclude('*.bat', '*.sh', 'lib', 'squirrel-sql.jar')
}


jar {
    dependsOn packOriginalHome

    manifest {
        attributes 'Implementation-Title': 'SQuirrel SQL Client 3.6',
            'Implementation-Version': version,
            'Permissions': 'all-permissions',
            'Application-Name': 'SQuirrel SQL Client 3.6'
    }

    from "build/tmp/squirrel-home.jar"
}

task copyMyJars(type: Copy, dependsOn: [jar]) {
    // copy compile result to signing
    from configurations.runtime
    from("build/libs")
    into("$buildWebstartDir/lib")
    include('*.jar')
}

task copyOtherWebstartFiles(type: Copy) {
    // only copies icon

    from("src/main/resources/images")
    into("$buildWebstartDir/signed")
    include('**/*.png')

}

task collectOriginalJars(type: Copy) {
    from("$originalDir")
    into("build/origlibs")
    include('**/*.jar')
    exclude(
        'plugins',
        'icons'
        //'**/xmlbeans.jar',	// duplicate entries
        //'**/core.jar',	// already signed
        //'**/org.eclipse.equinox.common.jar',
        //'**/osgi.jar',
        //'**/x86.jar'
        )
    //include('*.jar')
}

task unsignJars(dependsOn: [collectOriginalJars]) {

    def destdir = new File(buildDir, 'unsignedlibs')

    println destdir

    inputs.dir 'build/origlibs'
    outputs.dir destdir

    doLast{

        //def libFiles = files { file("build/origlibs/lib").listFiles() }

        copy{
            from('build/origlibs')
            into('build/unsignedlibs')
            include('**/*.jar')
        }

        def libFiles = fileTree('build/unsignedlibs'){
            include '**/*.jar'
        }

        libFiles.each {
            println it

            def fname = it
            exec {
                ignoreExitValue true
                commandLine 'c:/cygwin/bin/zip.exe', fname,
                    '-d', '*.inf','*.mf', '*.rsa', '*.sf',
                    '*.INF','*.MF', '*.RSA', '*.SF'
            }
        }

    }
}

task copyPatchedJars(type: Copy) {
    // original xmlbeans.jar has duplicate entries, jarsigner fails, so here is repacked file
    from("lib")
    into("$buildWebstartDir/lib/lib")
    include('**/*.jar')
}



task createKey{

    outputs.dir 'src/main/webstart'

    //File ksfile = new File('src/main/webstart/.keystore')
    //if(!ksfile.isFile()){
    doLast{
        ant.genkey(
            keystore: 'src/main/webstart/.keystore',
            storepass: 'password',
            alias: 'sergey.selivanov',
            validity: 365
            ){
            dname{
                param(name: 'CN', value: 'Sergey Selivanov')
                param(name: 'OU', value: 'Org Unit')
                param(name: 'O', value: 'Org')
                param(name: 'C', value: 'UA')
                param(name: 'L', value: 'Location')
            }
        }
    }
    //}
}


task signAll(dependsOn: [copyMyJars,  createKey]) << {
    new File("$buildWebstartDir/signed").mkdirs()
    new File("$buildWebstartDir/signed/lib").mkdirs()
    def libFiles = files { file("$buildWebstartDir/lib").listFiles() }
    libFiles.each {

        ant.signjar(
                destDir: "${buildWebstartDir}/signed",
                alias: 'sergey.selivanov',
                jar: it,
                keystore: 'src/main/webstart/.keystore',
                storepass: 'password',
                preservelastmodified: 'true')

    }

    libFiles = files { file("$buildWebstartDir/lib/lib").listFiles() }
    libFiles.each {

        ant.signjar(
                destDir: "${buildWebstartDir}/signed/lib",
                alias: 'sergey.selivanov',
                jar: it,
                keystore: 'src/main/webstart/.keystore',
                storepass: 'password',
                preservelastmodified: 'true')

    }
}

task generateJnlp(dependsOn: [signAll, copyOtherWebstartFiles]) << {

    def jnlpFileName = "${buildWebstartDir}/signed/squirrelsql.jnlp"
    outputs.file jnlpFileName

    File jnlpTemplateFile = new File('src/main/webstart/jnlp-template.xml')
    def root = new XmlParser().parse(jnlpTemplateFile)
    //def jnlpFileName = "squirrelsql.jnlp"

    root.@codebase = webstartBaseUrl
    root.@href = jnlpFileName

    def information = root.information[0]

    def icon = information.icon[0]
    icon.@href = webstartBaseUrl + '/acorn.png'


    def resource = root.resources[0]

    def collection = files { file("${buildWebstartDir}/lib").listFiles() }
    def mainJar = "squirrel-webstart-${version}.jar"
    collection.each {
        def resourceValues = [href: it.name]

        //	println it.name + ' - ' + mainJar

        if (mainJar == it.name) {
            resourceValues = [href: it.name, main: 'true']
        }
        if(it.name.endsWith('.jar')){
            resource.appendNode('jar', resourceValues)
        }
    }

    collection = files { file("${buildWebstartDir}/lib/lib").listFiles() }
    collection.each {
        def resourceValues = [href: 'lib/' + it.name]
        if(it.name.endsWith('.jar')){
            resource.appendNode('jar', resourceValues)
        }
    }

    // Setting the main class
    def applicationDesc = root.'application-desc'[0]
    applicationDesc.'@main-class' = mainClassName

    // Writing the jnlp file filled
    //File jnlpFile = new File("${buildWebstartDir}/signed/" + jnlpFileName)

    File jnlpFile = new File(jnlpFileName)

    def prn = new XmlNodePrinter(new PrintWriter(jnlpFile))
    prn.setPreserveWhitespace(true)
    prn.print(root)
}


task webstart (dependsOn: [generateJnlp])<< {
    println("Generating all webstart files in ${buildWebstartDir}/signed")
}

